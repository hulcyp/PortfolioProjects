
1.1.0:
  * Added CkConfig constructor on Android that takes a JavaVM pointer instead of a JNIEnv pointer, to be used in native activities or other situations when there is no valid JNIEnv pointer.
  * Added src/samples/hellocricket/android-ndk-native, showing an example of a native activity.
  * CkSetOutputCallback() and CkSound::setAudioCallback() are deprecated, and will be removed in a future release.  To process audio, use custom effects.
  * Added CkGetCpuLoad(), for an estimate of the time spent rendering audio.
  * Added CkEffect and CkEffectBus classes for adding effects; there are 3 predefined effects (Biquad Filter, Bit Crusher, and Ring Mod), or you can write your own.  See the manual for more information on using effects.
  * Updated libogg to 1.3.1
  * Fixed intermittent crash on iPhone 5.
  * Fixed bug when initializing on Android from Java prior to SDK version 10.
  * Fixed builds of source distributions on Windows.
  * If a bank is unloaded while a sound is playing, the sound is now stopped and a warning is printed.  Trying to play the sound again will also result in a warning.
  * The number of audio tasks is now configurable via CkConfig.maxAudioTasks.  This can be increased from the default (500) if you get a warning saying "Couldn't produce task for audio graph thread", which can happen if you have a large number of sounds playing at once.

1.0.31:
  * Native Android streams are now properly paused by CkSuspend()
  * Fixed memory leak of Objective-C wrappers on iOS and OS X
  * Added separate build configurations for Windows 7 and 8 (e.g. DebugStatic7, DebugStatic8, etc).  The 8 versions link to XAudio2 2.8, and will only work on Windows 8.  The 7 versions link to XAudio 2.7, and will work on Windows 7 or 8, as long as the DirectX June 2010 runtime is installed.

1.0.30:
  * Updated sample code for latest SDKs.
  * Added support to cktool for WAV files with 32-bit float data and for uncompressed AIFF-C files.
  * Fixed bug that caused getLoop() and getLoopCount() to not return correct values set from the defaults in the bank XML file.

1.0.29:
  * Fixed crash on iOS when an MP3 is played in the Music app and mixed with an MP3 stream played by Cricket Audio.
  * Fixed crash when app is brought back from background after calling CkShutdown()

1.0.28:
  * Added CkCustomFile base class, used for overriding low-level file reading behavior.
  * Added armv7s slice to iOS library.
  * We are dropping support for armv6 devices on iOS, since the latest version of Xcode (4.5) can no longer compile for armv6.
  * Fixed bug that caused crash on Windows when using wmain() instead of main().
  * CkInit() now returns a value to indicate when it fails.
  * Fixed bug that prevented NEON optimizations from being used on Android.

1.0.27:
  * Fixed audio glitch on Android 4.1 (Jelly Bean)
  * Windows libraries are now provided for both Visual Studio 2010 (v10.0) and Visual Studio 2012 (v11.0), and for both 32-bit and 64-bit architectures.  The Visual Studio 2012 libraries also include versions for Metro apps.

1.0.26:
  * Added 64-bit support for Mac OS (the library is a fat binary containing both 32-bit and 64-bit versions).
  * Fixed crash on Android devices that support the armv7a instruction set but do not support NEON instructions.

1.0.25:
  * Cricket Audio is now provided as a fat binary for iOS, combining the "iphoneos" (armv6/armv7) and "iphonesimulator" (i386) platforms into one library, in the lib/ios directory.
  * You can now create custom stream sounds, which is useful for playing audio from proprietary file formats.
  * Seeking forward in a stream can now be done instantly in some circumstances (i.e. without rebuffering)
  * Added support for proper management of "now playing" icon on iOS
  * Added option to set audio session category in CkConfig on iOS
  * Fixed handling of audio session interruptions on iOS
  * Streamlined audio output code on iOS
  * Added setPanMatrix() and getPanMatrix() to CkSound, for setting pan matrix explicitly
  * Fixed error when suspending app while playing streams from iTunes library on iOS
  * Fixed crash when destroying an Ogg Vorbis stream sound that was not initialized

1.0.24:
  * Added support for playing songs from iTunes library on iOS (using CkSound::createAssetStreamSound())
  * Added Doppler effect for 3D sounds
  * Added software support for Ogg Vorbis streams
  * Added volume attenuation modes for 3D sounds (none, linear, inverse distance, inverse square distance)
  * Fixed volume inconsistency between compressed stereo streams played on Android and other sounds
  * Compatibility improvements for Android 4.0

1.0.23:
  * Added support for positioning sounds in 3D space relative to the listener
  * Changes in volume to playing sounds now occur gradually; the rate of change of the
     volume can be set with CkSetVolumeRampTime().
  * Added CkSetOutputCallback() and CkSound::setAudioCallback() to set callbacks for custom audio processing 
  * More NEON optimizations
  * Improvements to audio quality of resampled audio
  * Compatibility improvements for running on Android 4.0

1.0.22:
  * Compatibility improvements for running on Android 2.2 and earlier
  * Performance improvements for stream sounds, due to improved threading 
  * Performance improvements for Android devices using Java audio output
  * Added NEON optimizations for iOS & Android
  * Reorganized and expanded documentation
  * Loop points can now be read from markers or other metadata in the source audio files (.wav and .aiff)
  * Default values for loop start/end, loop count, volume, and pan can now be 
     stored with the audio data for both bank sounds and stream sounds
  * Added CkSound::releaseLoop()
  * Added CkSound::setLoop() and CkSound::getLoop() to set & get loop points
  * Added CkSound::getCurrentLoop()
  * Switched to a new ADPCM format that allows for seeking and looping.  ADPCM data is in 24-byte blocks containing 36 samples (for a compression
    ratio of 3.0).  ADPCM sounds are padded with zeroes at the end if necessary to make their length a multiple of 36 samples; similarly, seeking
    will always be performed to the nearest multiple of 36 frames.

1.0.21:
  * Cleaned up doxygen output
  * Added functions for setting/getting playback position in ms:
      CkSound::setPlayPositionMs()
      CkSound::getPlayPositionMs()
  * Added CkConfig.audioUpdateMs option, for setting audio update interval
  * Added CkConfig.streamBufferMs option, for setting stream buffer sizes
  * Added CkConfig.streamFileUpdateMs option, for setting stream file update interval

1.0.20 beta:
  * Added support for licensing enforcement
  * Added functions for querying audio metadata:
      CkSound::getLength()
      CkSound::getLengthMs()
      CkSound::getSampleRate()
      CkSound::getChannels()
  * Added functions for setting/getting playback position:
      CkSound::setPlayPosition()
      CkSound::getPlayPosition()

1.0.19 beta:
  * Added -single option to cktool, to create a bank from a single audio file without an XML file
  * Windows version now comes in separate versions that link either statically or dynamically with the Microsoft runtime
  * Windows version of cktool now links statically to the Microsoft runtime

1.0.18 beta:
  * Added support for ADPCM and 8-bit PCM audio formats
  * Fixed playback of some MP3 files on iOS/MacOS
  * Fixed problems running cktool on Windows machines that do not have the DirectX SDK installed

1.0.16 beta:
  * Added ability to specify the number of loops for a looping sound
  * Added support in cktool for WAVEFORMATEXTENSIBLE format .wav files
  * Improved error handling for stream sounds
  * Fixed bug in cktool that caused problems reading certain types of .wav files
